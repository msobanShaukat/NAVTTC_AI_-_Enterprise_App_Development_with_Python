# -*- coding: utf-8 -*-
"""MD_1: Core_python_&_data_W#1_L#3_(Date:19-Aug-2025)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e2qfIplgMwhP0VZALh-Blwlp53hf5KOM

# 🧠 Module 1: Core Python & Data - Week 1 Lecture 3
**Date:** 19/08/2025  
**DOCUMENT BY:** MUHAMMAD SOBAN SHAUKAT

## ⚙️ The Engine of Logic: Python's Basic Operators

This Colab notebook dives into the symbols that make your code *do things*: **operators**. We'll learn how to perform calculations, make comparisons, and combine logical conditions to build the decision-making core of your programs.

## 📋 Today's Agenda

1.  **🧮 The Calculators - Arithmetic & Assignment Operators**
    *   Arithmetic Operators: `+`, `-`, `*`, `/`, `//`, `%`, `**`
    *   Assignment Operators: `=`, `+=`, `-=`, `*=`, `/=`, etc.
    *   Interactive Exercises

2.  **⚖️ The Decision Makers - Comparison & Logical Operators**
    *   Comparison Operators: `==`, `!=`, `>`, `<`, `>=`, `<=`
    *   **The Critical Difference:** `=` vs. `==`
    *   Logical Operators: `and`, `or`, `not`
    *   Interactive Exercises

3.  **📐 The Rules of Engagement - Operator Precedence**
    *   Understanding the order of operations
    *   Using `()` parentheses to control execution
    *   **Hands-On Lab:** Building the Ultimate Simple Calculator

## 1. 🧮 The Calculators - Arithmetic & Assignment Operators

Operators are the symbols that perform computations on your data. Let's start with the math ones!

### Arithmetic Operators: Beyond Basic Math

These operators are used for mathematical calculations. A key Python feature is its specific behavior with division.

| Operator | Name | Description | Example | Result |
| :---: | :--- | :--- | :---: | :---: |
| `+` | Addition | Adds two numbers | `10 + 5` | `15` |
| `-` | Subtraction | Subtracts right num from left | `10 - 5` | `5` |
| `*` | Multiplication | Multiplies two numbers | `10 * 5` | `50` |
| `**` | Exponent | Raises to the power of | `10 ** 2` | `100` |
| `/` | **True Division** | ⚠️ *Always returns a `float`* | `10 / 4` | `2.5` |
| `//` | **Floor Division** | Divides & rounds *down* to whole number | `10 // 4` | `2` |
| `%` | Modulus | Returns the *remainder* of division | `10 % 3` | `1` |
"""

# Let's try them out!
a = 10
b = 3

print("a + b =", a + b)
print("a - b =", a - b)
print("a * b =", a * b)
print("a ** b =", a ** b) # 10 to the power of 3
print("a / b =", a / b)   # True Division - always a float
print("a // b =", a // b) # Floor Division - drops the decimal
print("a % b =", a % b)   # Remainder of 10 / 3

"""### 🧠 In-Class Exercise: Area and Perimeter

You are given `length = 15.5` and `width = 8.2`.
*   Calculate the **area** of the rectangle (length * width).
*   Calculate the **perimeter** (2 * (length + width)).
*   Print both results in a formatted string.
"""

# Exercise: Area and Perimeter
length = 15.5
width = 8.2

area = length * width
perimeter = 2 * (length + width)

print(f"The area of the rectangle is: {area}")
print(f"The perimeter of the rectangle is: {perimeter}")

"""### Assignment Operators: Efficient Shorthand

The basic `=` assigns a value. **Compound assignment operators** perform an operation *and* an assignment in one step. They make your code more concise.

| Operator | Example | Equivalent To |
| :---: | :--- | :--- |
| `=` | `x = 5` | `x = 5` |
| `+=` | `x += 5` | `x = x + 5` |
| `-=` | `x -= 5` | `x = x - 5` |
| `*=` | `x *= 5` | `x = x * 5` |
| `/=` | `x /= 5` | `x = x / 5` |
| `//=` | `x //= 5` | `x = x // 5` |
| `%=` | `x %= 5` | `x = x % 5` |
| `**=` | `x **= 2` | `x = x ** 2` |
"""

# Example of Assignment Operators
score = 10
print("Initial score:", score)

score += 5 # Same as: score = score + 5
print("After score += 5:", score)

score **= 2 # Same as: score = score ** 2
print("After score **= 2:", score)

power_level = 9000
print("\nIt's over", power_level, "!!!")
power_level += 1 # The famous mistake
print("It's over", power_level, "!!!")

"""### 🧠 In-Class Exercise: Leveling Up a Game Character

A game character starts with `health = 100` and `mana = 50`.
*   The character finds a health potion, which adds `25` health. Update the health using `+=`.
*   The character casts a spell that costs `30` mana. Update the mana using `-=`.
*   Print the final health and mana.
"""

# Exercise: Game Character
health = 100
mana = 50

print(f"Initial Stats - Health: {health}, Mana: {mana}")

# Your code here: Apply potion and spell
health += 25  # Health potion adds 25
mana -= 30    # Spell costs 30 mana

print(f"Final Stats - Health: {health}, Mana: {mana}")

"""## 2. ⚖️ The Decision Makers - Comparison & Logical Operators

These operators don't calculate values; they ask **questions** that result in `True` or `False`. They are the foundation of all decision-making in code (`if` statements, loops).

### Comparison Operators: Asking Questions

These operators compare two values and always return a **Boolean** (`True` or `False`).

| Operator | Description | Example | Result |
| :---: | :--- | :---: | :---: |
| `==` | Equal to | `5 == 5` | `True` |
| `!=` | Not equal to | `5 != 5` | `False` |
| `>` | Greater than | `5 > 4` | `True` |
| `<` | Less than | `5 < 5` | `False` |
| `>=` | Greater than or equal to | `5 >= 5` | `True` |
| `<=` | Less than or equal to | `5 <= 4` | `False` |
"""

# Let's compare!
x = 10
y = 12

print("x == y:", x == y) # False
print("x != y:", x != y) # True
print("x > y:", x > y)   # False
print("x < y:", x < y)   # True
print("x >= y:", x >= y) # False
print("x <= y:", x <= y) # True

# We can compare strings too!
name1 = "Alice"
name2 = "Bob"
print("\nname1 == name2:", name1 == name2)

"""### 🚨 CRITICAL DISTINCTION: = vs. ==

This is one of the most common bugs for new programmers!

*   `=` is the **assignment operator**. It **puts** the value on the right **into** the variable on the left.
    *   Example: `my_score = 100` (Sets `my_score` to 100)

*   `==` is the **comparison operator**. It **asks** if the value on the left is **equal to** the value on the right.
    *   Example: `my_score == 100` (Checks if `my_score` is 100, results in `True` or `False`)
"""

# Demonstrating the difference
my_variable = 10 # ASSIGNMENT: Puts 10 into my_variable
print("Value of my_variable after assignment:", my_variable)

check = (my_variable == 10) # COMPARISON: Asks "is my_variable equal to 10?"
print("Result of comparison (my_variable == 10):", check)

# A common mistake (often in if-statements)
# if my_variable = 10: # This would cause a SyntaxError!
#    print("This won't work!")

"""### Logical Operators: Combining Questions

Python uses plain English words (`and`, `or`, `not`) for logic, which is much more readable than symbols like `&&`, `||`, `!` used in other languages.

| Operator | Description | Example |
| :---: | :--- | :--- |
| `and` | Returns `True` **only if** both statements are true. | `has_ticket and has_id` |
| `or` | Returns `True` **if at least one** statement is true. | `is_weekend or is_holiday` |
| `not` | **Reverses** the result. Returns `True` if false, `False` if true. | `not is_raining` |
"""

# Logical Operator Examples
age = 25
has_license = True
is_weekend = False
is_raining = True

# Can drive if over 18 AND has a license
can_drive = age > 18 and has_license
print("Can drive?", can_drive)

# Will go out if it's the weekend OR it's a holiday (we'll pretend it's not)
will_go_out = is_weekend or False # One false, one false -> False
print("Will go out?", will_go_out)

# Will stay in if it is raining
will_stay_in = is_raining # Simple, but not using 'not'
print("Will stay in?", will_stay_in)

# Will go out if it is NOT raining
will_go_out_if_dry = not is_raining
print("Will go out if it's dry?", will_go_out_if_dry)

"""### ✨ Chaining Comparisons: The Pythonic Way

Python allows you to chain comparisons for incredibly readable code, especially for checking if a value is within a range.
"""

# Checking if someone is a teenager
age = 15

# The way you might think to do it (works fine)
if age >= 13 and age <= 19:
    print("You are a teenager. (Method 1)")

# The beautiful, Pythonic way
if 13 <= age <= 19:
    print("You are a teenager. (Method 2 - Pythonic!)")

# This also works for other checks
x = 5
print(1 < x < 10) # Is x between 1 and 10? True
print(10 < x < 20) # Is x between 10 and 20? False

"""### 🧠 In-Class Exercise: Access Control Logic

Write a single Boolean expression that determines if a user can access a secure area. The conditions are:
1.  The user must be an `'admin'` **OR** have a `security_clearance` level greater than `4`.
2.  The user must **NOT** be on the `watch_list`.

Create variables `user_role`, `security_clearance`, and `on_watch_list` to test your expression.
"""

# Exercise: Access Control Logic
# Test Case 1: An admin not on the watchlist -> SHOULD BE TRUE
user_role = 'admin'
security_clearance = 3 # Doesn't matter for admin
on_watch_list = False

# Test Case 2: A high-clearance user not on the watchlist -> SHOULD BE TRUE
# user_role = 'user'
# security_clearance = 5
# on_watch_list = False

# Test Case 3: A user on the watchlist -> SHOULD BE FALSE, no matter what
# user_role = 'admin'
# security_clearance = 10
# on_watch_list = True

# Your single Boolean expression here:
can_access = (user_role == 'admin' or security_clearance > 4) and not on_watch_list

print("User can access secure area:", can_access)

"""## 3. 📐 The Rules of Engagement - Operator Precedence

When you have multiple operators in one expression, Python follows a specific **order of operations**, just like PEMDAS/BODMAS in math.

### Simplified Order of Precedence (Highest to Lowest)

1.  `()` **Parentheses** - Always evaluated first. Use them to force the order you want!
2.  `**` Exponentiation
3.  `*`, `/`, `//`, `%` Multiplication, Division, Floor Division, Modulus
4.  `+`, `-` Addition, Subtraction
5.  `==`, `!=`, `>`, `<`, `>=`, `<=` Comparisons
6.  `not` Logical NOT
7.  `and` Logical AND
8.  `or` Logical OR

**The Golden Rule 🏆:** You don't need to memorize this! **When in doubt, use parentheses `()`** to make your intentions crystal clear. Readable code is better than clever code.
"""

# Demonstrating Precedence

# What is the result? Multiplication happens before addition.
result1 = 5 + 10 * 2
print("5 + 10 * 2 =", result1)

# Use parentheses to change the order - addition happens first.
result2 = (5 + 10) * 2
print("(5 + 10) * 2 =", result2)

# Logical operator precedence: not -> and -> or
# Is this True or False?
result3 = True or False and not True
print("True or False and not True =", result3) # not True is False -> False and False is False -> True or False is True

# Using parentheses makes the intended logic obvious.
result4 = True or (False and (not True))
print("With parentheses for clarity:", result4)

"""### 🧠 In-Class Exercise: Predict the Output

• Without running the code, what will be the final boolean value of `can_proceed`? Think about the order of operations!
"""

# Exercise: Predict the Output
score = 85
time_remaining = 10
has_bonus = False

# Break it down step-by-step based on precedence:
# 1. score > 80 -> True
# 2. time_remaining > 0 -> True
# 3. score > 90 -> False
# 4. not score > 90 -> not False -> True
# 5. has_bonus and not score > 90 -> False and True -> False
# 6. score > 80 and time_remaining > 0 -> True and True -> True
# 7. True or False -> True

can_proceed = score > 80 and time_remaining > 0 or has_bonus and not score > 90

print("My prediction was: True")
print("Actual result is:", can_proceed)

"""## 🧪 Hands-On Lab: The Ultimate Simple Calculator

Your mission is to build a powerful calculator script that does three things:
1.  **Arithmetic:** Performs all basic math operations on two numbers.
2.  **Comparison:** Checks the relationship between the two numbers.
3.  **Logic:** Makes intelligent checks about the numbers.

Let's build it step-by-step.

### 🔧 Part 1: Setup and Arithmetic

1.  Prompt the user to enter two numbers. **Remember to convert them to `float`s!**
2.  Perform all arithmetic operations on them.
3.  Print the results cleanly.
"""

# Part 1: Setup and Arithmetic
print("--- Ultimate Simple Calculator ---")
print("Please enter two numbers.")

# Get user input and convert to float
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))

print("\n" + "="*40)
print("--- Arithmetic Results ---")
print("Sum (num1 + num2):", num1 + num2)
print("Difference (num1 - num2):", num1 - num2)
print("Product (num1 * num2):", num1 * num2)
print("Quotient (num1 / num2):", num1 / num2)
print("Floor Quotient (num1 // num2):", num1 // num2)
print("Remainder (num1 % num2):", num1 % num2)
print("Power (num1 ** num2):", num1 ** num2)

"""### ⚖️ Part 2: Comparison Checks

Perform a series of comparisons between `num1` and `num2`. Print the Boolean result of each.
"""

# Part 2: Comparison Checks
print("\n" + "="*40)
print("--- Comparison Results ---")
print("Is num1 equal to num2?", num1 == num2)
print("Is num1 not equal to num2?", num1 != num2)
print("Is num1 greater than num2?", num1 > num2)
print("Is num1 less than num2?", num1 < num2)
print("Is num1 greater than or equal to num2?", num1 >= num2)
print("Is num1 less than or equal to num2?", num1 <= num2)

"""### 🧠 Part 3 (Challenge): Logical Scenarios

Make your calculator smarter by adding these logical checks.
"""

# Part 3: Logical Scenarios
print("\n" + "="*40)
print("--- Logical Checks ---")

# Check if both numbers are positive
both_positive = num1 > 0 and num2 > 0
print("Are both numbers positive?", both_positive)

# Check if at least one number is very large (> 100)
one_is_large = num1 > 100 or num2 > 100
print("Is at least one number greater than 100?", one_is_large)

# CRUCIAL: Check if it's safe to divide (is num2 not zero?)
# Division by zero causes a crash! This check prevents that.
is_division_safe = num2 != 0
print("Is it safe to divide (num2 != 0)?", is_division_safe)

# Only perform division if it's safe
if is_division_safe:
    division_result = num1 / num2
    print(f"Safe Division Result: {division_result}")
else:
    print("Cannot perform division: Division by zero is undefined.")