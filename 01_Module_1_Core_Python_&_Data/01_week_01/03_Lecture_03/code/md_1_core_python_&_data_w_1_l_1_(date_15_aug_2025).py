# -*- coding: utf-8 -*-
"""MD_1: Core_python_&_data_W#1_L#1_(Date:15-Aug-2025)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xAh8l3J9SgOYDygkX--9DPcGFMmdBOOR

# Module 1: Core Python & Data - Week 1 Lecture 1

###**Introduction to Python**:
History, use cases, and setting up the development environment (Python, VS Code)

**Date:** 15/08/2025

**DOCUMENT BY:** MUHAMMAD SOBAN SHAUKAT

## A Launchpad into Python and AI: Your First Steps

Welcome to the world of Python and Artificial Intelligence! This repository contains the code and exercises from the first lecture, designed to be your **launchpad** into programming.

Whether you're a complete beginner or have experience in other languages, this module will guide you through:
*   Understanding why Python is dominant in AI.
*   Setting up a professional development environment.
*   Writing and executing your first Python scripts.

---

## üìã Agenda

1.  [Introduction to Python](#introduction-to-python)
2.  [Why Python for AI?](#why-python-for-ai)
3.  [Real-World Motivation](#real-world-motivation)
4.  [Setting Up Your Lab](#-setting-up-your-lab)
5.  [Hello, World!](#hello-world-your-first-python-script)
6.  [Hands-On Exercises](#-hands-on-exercises)

## Introduction to Python

### A Brief History
Python was created by **Guido van Rossum** in the late 1980s. Its design philosophy emphasizes:
*   **Code Readability:** Syntax that is clean and resembles English.
*   **Simplicity:** Making programming accessible and enjoyable. (The name itself is a tribute to Monty Python's comedy group!).

**Key Milestones:**
*   **1991:** First release (v0.9.0)
*   **2000:** Python 2.0
*   **2008:** Python 3.0 (a major, backward-*incompatible* release)
Today, Python is maintained by the **Python Software Foundation** and is one of the most popular languages in the world.

### Modern Use Cases
Python's versatility makes it a powerhouse in many fields:
*   üåê **Web Development:** With frameworks like **Django** and **Flask**.
*   üìä **Data Science:** Using libraries like **Pandas** (data manipulation), **NumPy** (numerical computations), and **Matplotlib** (visualization).
*   ‚öôÔ∏è **Automation & Scripting:** For automating repetitive tasks.
*   üîí **Cybersecurity:** For writing security tools and scripts.
*   üéÆ **Game Development:** Creating prototypes and games with libraries like **Pygame**.

## Why Python for AI?

Python's dominance in AI is no accident. Here's why it's the #1 choice:

1.  ** Simplicity & Readability:** Its clean syntax lets developers focus on complex AI logic instead of tricky code.
2.  ** Rich Ecosystem:** A vast collection of specialized libraries:
    *   `TensorFlow`, `PyTorch`, `Keras`: For deep learning.
    *   `Scikit-learn`: For classic machine learning (classification, regression).
    *   `NumPy`, `Pandas`: For data handling and analysis.
3.  ** Strong Community:** Huge support network. Solutions to common problems are just a web search away.
4.  ** Open-Source and Free:** Accessible to everyone, from students to large companies.
5.  ** Versatility:** Can be used for every part of the AI pipeline.

## Real-World Motivation

The concepts you learn here power incredible technologies:
*   **Netflix:** Uses ML (with Python) to recommend shows you'll love.
*   **Social Media:** Uses AI to automatically detect and filter spam.
*   **Finance:** Uses predictive models for stock trading and investment.
*   **Robotics:** (e.g., Boston Dynamics) uses Python for testing and development.
*   **Smart Assistants:** Siri and Alexa use Python-based Natural Language Processing (NLP) to understand you.

This is the journey you are starting today!

## üõ† Setting Up Your Lab

### Step 1: Install Python
1.  Go to [python.org/downloads](https://www.python.org/downloads/).
2.  Download the latest **Python 3** installer for your OS (Windows, macOS, Linux).
3.  **Windows Users:** **CRUCIAL** - During installation, check the box that says **"Add Python to PATH"**.
4.  **Verify Installation:** Open a terminal (Command Prompt on Win, Terminal on Mac/Linux) and type:
    ```bash
    python --version   # Try this first on Windows
    python3 --version  # Try this first on macOS/Linux
    ```
    You should see a version number (e.g., `Python 3.11.4`).

### Step 2: Install VS Code
1.  Go to [code.visualstudio.com/download](https://code.visualstudio.com/download).
2.  Download and install the version for your operating system.

### Step 3: Install the Python Extension
1.  Open VS Code.
2.  Click the Extensions icon in the sidebar (or press `Ctrl+Shift+X`).
3.  Search for `Python`.
4.  Install the extension published by **Microsoft**.

### Step 4: Virtual Environments with Miniconda

Virtual environments solve the "works on my machine" problem by isolating dependencies per project.

1.  **Install Miniconda:**
    *   Download from [docs.conda.io/en/latest/miniconda.html](https://docs.conda.io/en/latest/miniconda.html).
    *   Run the installer. Accept the default settings.

2.  **Create an Environment:**
    Open your terminal (Anaconda Prompt on Windows is best) and run:
    ```bash
    conda create --name ai-course python=3.9
    ```
    Type `y` and press Enter to proceed.

3.  **Activate the Environment:**
    ```bash
    conda activate ai-course
    ```
    Your terminal prompt should now show `(ai-course)`, meaning you are working inside the isolated environment.

4.  **Deactivate the Environment:**
    When you're done, run:
    ```bash
    conda deactivate
    ```

## Hello, World! Your First Python Script

Let's test your setup! Create a new file called `hello.py` and type the following code:
"""

# hello.py
print("Hello, World!")

"""---

**Content:**
Five progressive exercises:
1.  **Personalized Greeting:** Use a variable to print a name.
2.  **Fun with Variables:** Use an integer and a string variable.
3.  **Simple Calculator:** Perform basic arithmetic.
4.  **User Input:** Get input from the user using `input()`.
5.  **Challenge: Area of a Rectangle:** Convert user input from string to integer and calculate.

**Detailed Explanation:**
These exercises are perfectly sequenced to introduce core programming concepts:
1.  **Variables:** Storing and using data.
2.  **Data Types:** Working with strings and integers.
3.  **Operators:** Performing mathematical operations.
4.  **Input/Output:** Interacting with the user.
5.  **Type Conversion:** The crucial concept of converting between data types (e.g., `string` to `int`).

**Markdown & Code for GitHub:**
This is the core of the repository. We'll create a section for exercises and a separate code file for each.

---
### üß™  Hands-On Exercises

Time to get your hands dirty! Try to complete these exercises in order. The best way to learn is by doing‚Äîtry to solve them yourself before looking at the solutions!

---

### **Exercise 1**: Personalized Greeting
**Task:** Modify `hello.py`. Create a variable to store your name and print a personalized greeting.

<details>
<summary><b>Click to Reveal Solution</b></summary>

**File Name:** `exercise_1_greeting.py`
```python
# exercise_1_greeting.py
name = "Orangzaib"  # Replace with your name!
print("Hello, " + name + "!")
# Alternatively, using f-strings (a more modern way):
# print(f"Hello, {name}!")
"""

name = "Soban Shaukat"  # Replace with your name!
print("Hello, " + name + "!")
# Alternatively, using f-strings (a more modern way):
print(f"Hello, {name}!")

"""---
### **Exercise 2:** Fun with Variables
**Task**: Create a new file. Store your age (integer) and favorite hobby (string) in variables. Print a combined sentence.

<details> <summary><b>Click to Reveal Solution</b></summary>
File Name: exercise_2_variables.py

# exercise_2_variables.py
age = 25  # Replace with your age

hobby = "hiking"  # Replace with your hobby

print("I am", age, "years old and I love to go", hobby + ".")
Using an f-string is often cleaner:
print(f"I am {age} years old and I love to go {hobby}.")
"""

age = 25 # Replace with your age
hobby = "hiking" # Replace with your hobby

print("I am", age, "years old and I love to go", hobby + ".")

#Using an f-string is often cleaner:
print(f"I am {age} years old and I love to go {hobby}.")

"""---
###**Exercise 3:** Simple Calculator
Task: Create two variables with numbers. Print the sum, difference, product, and quotient.

<details> <summary><b>Click to Reveal Solution</b></summary>
File Name: exercise_3_calculator.py

# exercise_3_calculator.py
num1 = 10

num2 = 5

sum_result = num1 + num2

difference = num1 - num2

product = num1 * num2

quotient = num1 / num2

print("Sum:", sum_result)

print("Difference:", difference)

print("Product:", product)

print("Quotient:", quotient)
"""

num1 = 10
num2 = 5

sum_result = num1 + num2
difference = num1 - num2
product = num1 * num2
quotient = num1 / num2

print("Sum:", sum_result)
print("Difference:", difference)
print("Product:", product)
print("Quotient:", quotient)

"""---
###**Exercise 4:** User Input
Task: Ask the user for their name and city and print a message.

<details> <summary><b>Click to Reveal Solution</b></summary>
File Name: exercise_4_input.py

# exercise_4_input.py
user_name = input("What is your name? ")
**bold text**
user_city = input("What city do you live in? ")

print("Hello", user_name + "! How is the weather in", user_city + "?")
"""

user_name = input("What is your name? ")
user_city = input("What city do you live in? ")

print("Hello", user_name + "! How is the weather in", user_city + "?")

"""---
###**Exercise 5 (Challenge):** Area of a Rectangle
Task: Ask the user for width and height. Calculate and print the area. Remember to convert input to integers!

<details> <summary><b>Click to Reveal Solution</b></summary>
File Name: exercise_5_rectangle.py

# exercise_5_rectangle.py
width = input("Enter the width of the rectangle: ")

height = input("Enter the height of the rectangle: ")

# Convert the input strings to integers

width_int = int(width)

height_int = int(height)

# Calculate the area
area = width_int * height_int


print("The area of the rectangle is:", area)
"""

width = input("Enter the width of the rectangle: ")
height = input("Enter the height of the rectangle: ")

# Convert the input strings to integers
width_int = int(width)
height_int = int(height)

# Calculate the area
area = width_int * height_int

print("The area of the rectangle is:", area)

"""**END OF LECTURE_#_1 **
**HAPPY CODING**
"""