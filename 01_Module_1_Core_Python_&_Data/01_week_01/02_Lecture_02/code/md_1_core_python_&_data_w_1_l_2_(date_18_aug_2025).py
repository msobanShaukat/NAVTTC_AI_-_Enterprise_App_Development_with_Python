# -*- coding: utf-8 -*-
"""MD_1: Core_python_&_data_W#1_L#2_(Date:18-Aug-2025)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-MM0ffnrK-eqZN84Rz-DCsxLmLtOEzei

# Module 1: Core Python & Data - Week 1 Lecture 2

**Date:** 18/08/2025

**DOCUMENT BY**: MUHAMMAD SOBAN SHAUKAT

## Python's Foundation: Syntax, Variables & Data Types

This repository contains the code and exercises from the second lecture, where we dive into the fundamental building blocks of every Python program: its syntax rules, variables, and core data types.

## ðŸ“‹ Agenda

1.  [Python Syntax & Variables](#python-syntax--variables)
    *   [The Zen of Python](#the-zen-of-python)
    *   [Indentation](#indentation-is-syntax)
    *   [Comments](#comments-notes-to-yourself)
    *   [Variables & Naming](#variables--naming-conventions)
    *   [Dynamic Typing](#dynamic-typing)
2.  [Core Data Types](#the-building-blocks---core-data-types)
    *   [Numbers: `int` and `float`](#numbers-int-and-float)
    *   [Text: `str` and String Formatting](#text-type-strings-str)
    *   [Boolean: `bool`](#boolean-type-bool)
3.  [Putting It All Together](#putting-it-all-together)
    *   [Type Casting](#type-casting)
    *   [Hands-On Lab](#-hands-on-lab-exercises)

## Python Syntax & Variables

### The Zen of Python
Python has a set of guiding principles known as the "Zen of Python." You can see them by typing `import this` in a Python interpreter. They emphasize readability, simplicity, and clarity.

### Indentation is Syntax
This is the most critical concept to grasp. Unlike languages that use curly braces `{}` to denote code blocks, Python uses whitespace.
*   **What it means:** The indentation of your code directly affects its execution.
*   **The Rule:** The standard is **four spaces** per indentation level.
*   **Why?** It forces clean, readable code for everyone.

### Indentation Example
"""

# Python uses a colon (:) and indentation
x = 10
y = 5

if x > y:
    print("x is greater") # This line is inside the if block
    print("This is also inside the if statement") # So is this one

print("This is outside the if statement") # This line is not indented, so it's outside

"""---

### **Slide 5: In-Class Exercise: Spot the Error**

**Content:**
A piece of broken Python code where the `print` statements inside the `if` and `else` blocks are not indented.

**Detailed Explanation:**
This is a crucial exercise. The provided code will cause an `IndentationError` and will not run. The fix is to indent the lines under the `if` and `else` statements. This reinforces the absolute necessity of proper indentation.

**Markdown & Code for GitHub:**
We'll show the broken code and the fixed code.

```markdown
### ðŸ§  In-Class Exercise: Spot the Error

The code below is broken. It will cause an `IndentationError`. Can you fix it?

**Broken Code:**
```python

"""

# --- BROKEN CODE ---
name = "Alice"
if name == "Alice":
    print("Hello, Alice")  # This line needs to be indented!
else:
    print("You are not Alice.") # This line needs to be indented!

"""**Explaination**: The selected code cell has an IndentationError. This is because the lines under the if and else statements are not indented. In Python, indentation is used to define code blocks. I will fix this error by adding 4 spaces of indentation to the print statements.


"""

# --- FIXED CODE ---
name = "Alice"
if name == "Alice":
    print("Hello, Alice") # Fixed! 4 spaces of indentation.
else:
    print("You are not Alice.") # Fixed! 4 spaces of indentation.

"""### Comments: Notes to Yourself
Comments are for humans, ignored by Python. Use `#` for single-line comments.
"""

# This is a single-line comment. It explains the next line of code.

# Calculate the area of a circle with a radius of 5
pi = 3.14159
radius = 5
area = pi * (radius ** 2)  # The ** operator means 'to the power of'
print(area)

"""### Variables & Naming Conventions
Think of a variable as a **labeled box** for storing data. Use **snake_case** (e.g., `user_email`) for variable names in Python.
"""

# Pythonic way (snake_case)
first_name = "Guido"
user_email_address = "guido@python.org"
print(first_name, user_email_address)

# Non-Pythonic (camelCase - works but not standard)
firstName = "Guido"
userEmailAddress = "guido@python.org"
print(firstName, userEmailAddress)

"""### Variable Naming Rules
*   Must start with a letter or underscore `_`.
*   Cannot contain spaces (use `_`).
*   Can only contain letters, numbers, and `_`.
*   Names are case-sensitive (`age`, `Age`, `AGE` are different).
*   Use meaningful names! (`user_id` is better than `ui`).

### Dynamic Typing
Python is **dynamically typed**. You don't declare a variable's type. It can even change!
"""

# This is perfectly valid in Python
my_variable = 101    # my_variable is an integer
print(type(my_variable))

my_variable = "Now I'm a string" # The same variable now holds a string
print(type(my_variable))

"""## 2. The Building Blocks - Core Data Types
Every piece of data has a "type". Check it with the `type()` function.
"""

my_variable = "Hello"
print(type(my_variable)) # Output: <class 'str'>

"""### Numbers: int and float
*   **Integers (int):** Whole numbers (e.g., `25`, `-10`).
*   **Floats (float):** Numbers with a decimal point (e.g., `19.99`, `3.14159`).
*   **Division:**
    *   `/` (True Division): Always returns a `float`.
    *   `//` (Floor Division): Discards the fractional part.
"""

x = 10
y = 3

print("Addition (x + y):", x + y)
print("Subtraction (x - y):", x - y)
print("Multiplication (x * y):", x * y)
print("True Division (x / y):", x / y) # Result is a float
print("Floor Division (x // y):", x // y) # Drops the decimal
print("Modulus - Remainder (x % y):", x % y)
print("Exponent (x ** y):", x ** y) # 10 to the power of 3

"""### ðŸ§  Exercise: Simple Math
1.  Create variables `item_price` and `quantity`. Calculate the `total_cost`.
2.  You have 25 slices of pizza and 7 people. Calculate slices per person and leftover slices.
"""

# Exercise: Simple Math
# Your code for item_price and quantity here
item_price = 5.0
quantity = 3
total_cost = item_price * quantity
print("Total cost:", total_cost)

# Your code for pizza slices here
total_slices = 25
num_people = 7
slices_per_person = total_slices // num_people
leftover_slices = total_slices % num_people
print("Each person gets", slices_per_person, "slices.")
print("There will be", leftover_slices, "leftover slices.")

"""### Text Type: Strings (str)
Strings represent text. Use single `'` or double `"` quotes.
"""

single_quote_string = 'This is a string.'
double_quote_string = "This is also a string."
print(single_quote_string)
print(double_quote_string)

"""#### String Concatenation
"Add" strings together with the `+` operator.
"""

first_name = "Grace"
last_name = "Hopper"
full_name = first_name + " " + last_name # The " " adds a space
print(full_name)

"""#### F-Strings (Formatted String Literals)
The modern, best way to format strings. Prefix your string with `f` and put variables inside `{}`.
"""

language = "Python"
version = 3.9
message = f"I am programming in {language} version {version}."
print(message)

"""#### ðŸ§  Exercise: F-String
Create variables for your `first_name` and `favorite_language`. Use an f-string to print a sentence.
"""

# Exercise: F-String
first_name = "YourName" # Replace with your name!
favorite_language = "Python"
message = f"My name is {first_name} and my favorite programming language is {favorite_language}."
print(message)

"""#### Useful String Methods
Strings have built-in functions (methods) like `.strip()` and `.lower()`.
"""

raw_data = " UserID:12345 "
clean_data = raw_data.strip() # Removes leading/trailing whitespace
print("|" + clean_data + "|")

user_id = clean_data.replace("UserID:", "") # Replaces a substring
print(user_id)

"""#### ðŸ§  Exercise: String Cleaning
Given `dirty_string = "---HELLO, WORLD!--"`, clean it to get `"hello, world!"`.
*Hint: Chain `.strip("-").lower()`*
"""

# Exercise: String Cleaning
dirty_string = "---HELLO, WORLD!--"
clean_string = dirty_string.strip("-") # First, remove the dashes from the ends
clean_string = clean_string.lower()    # Then, make it lowercase
print(clean_string)

# Advanced: You can also "chain" the methods together:
clean_string = dirty_string.strip("-").lower()
print(clean_string)

"""### Boolean Type: bool
Represents `True` or `False` (note the capitalization). The foundation of decision-making.
"""

x = 10
y = 5

is_greater = x > y   # is_greater is now True
is_equal = (x == y)  # is_equal is now False
is_not_equal = (x != y) # is_not_equal is now True

print(f"Is x greater than y? {is_greater}")
print(f"Is x equal to y? {is_equal}")
print(f"Is x not equal to y? {is_not_equal}")

"""#### Truthy and Falsy Values
In conditions, some non-Boolean values are treated as `True` or `False`:
*   **Falsy:** `0`, `""` (empty string), `[]` (empty list), `None`.
*   **Truthy:** Almost everything else.
"""

user_name = input("Enter your name (or just press Enter to leave it blank): ")

# This works because an empty string is "Falsy"
if user_name:
    print(f"Welcome, {user_name}!")
else:
    print("Welcome, guest!")

"""#### ðŸ§  Exercise: Simple Comparison
Create a variable `my_age` and another variable `voting_age = 18`. Print `True` or `False` if `my_age` is old enough to vote.
"""

# Exercise: Simple Comparison
my_age = 20  # Change this value and run the cell again!
voting_age = 18
can_vote = my_age >= voting_age
print("Can I vote?", can_vote)

"""## 3. Putting It All Together

### Type Casting
Converting between data types. Crucial for user input, as `input()` always returns a string. Use `int()`, `float()`, `str()`.
"""

# --- COMMON ERROR ---
current_year = 2025
birth_year_str = input("What year were you born? ") # e.g., User enters "1995"
age = current_year - birth_year_str # This causes a TypeError!

# --- CORRECTED CODE ---
birth_year_int = int(birth_year_str) # Cast string to integer
age = current_year - birth_year_int
print(f"You are approximately {age} years old.")

"""#### ðŸ§  Exercise: Fix the Bug (Type Casting)
Fix the code below by casting `item_price_str` to a float.
"""

# Exercise: Fix the Bug
item_price_str = "19.99"
tax_rate = 0.07

# Add your fix here!
item_price_float = float(item_price_str) # Convert the string to a float
total_price = item_price_float * (1 + tax_rate)

print(f"Total price: ${total_price:.2f}") # :.2f formats to 2 decimal places

"""## ðŸ§ª Hands-On Lab Exercises
Time to combine everything you've learned!

### Exercise 1: Personal Bio Creator
Create variables for your name (string), age (integer), city (string), and is_learning_python (boolean). Use a single multi-line f-string to print a formatted biography.
"""

# Exercise 1: Personal Bio Creator
name = "Alice"
age = 30
city = "Wonderland"
is_learning_python = True

bio = f"""
Name: {name}
Age: {age}
City: {city}
Currently learning Python: {is_learning_python}
"""
print(bio)

"""### Exercise 2: Interactive Tip Calculator
1.  Ask the user for the `bill_total`.
2.  Ask for the `tip_percentage` (e.g., 15, 18, 20).
3.  Cast inputs to correct types (`float` for bill, `int` for tip).
4.  Calculate the `tip_amount` and `grand_total`.
5.  Print a formatted summary.
"""

# Exercise 2: Interactive Tip Calculator
bill_total_str = input("Enter the total bill amount: $")
tip_percentage_str = input("Enter the tip percentage you want to leave (e.g., 15 for 15%): ")

# Cast inputs to numbers
bill_total = float(bill_total_str)
tip_percentage = int(tip_percentage_str)

# Calculations
tip_decimal = tip_percentage / 100
tip_amount = bill_total * tip_decimal
grand_total = bill_total + tip_amount

# Print summary
print(f"\nFor a bill of ${bill_total:.2f}, a {tip_percentage}% tip is ${tip_amount:.2f}, for a grand total of ${grand_total:.2f}.")

"""### Exercise 3: String Manipulation & Parsing
You are given a string: `log_entry = "INFO:2025-08-18:User 'admin' logged in successfully."`
Your task is to extract the date, the username, and the message using string methods like `.split()`.
"""

# Exercise 3: String Manipulation & Parsing
log_entry = "INFO:2025-08-18:User 'admin' logged in successfully."

# Split the string by colons (:)
parts = log_entry.split(':')
print("Split parts:", parts)

# Extract the date (second part)
date = parts[1]
print("Date:", date)

# The third part contains the user and message. Let's split it by space.
third_part = parts[2]
# Find the username between the quotes
username_start = third_part.find("'") + 1
username_end = third_part.find("'", username_start)
username = third_part[username_start:username_end]
print("Username:", username)

# The message is the rest of the string. Use slicing.
message = third_part[username_end+2:] # +2 to skip the quote and space
print("Message:", message)

# More advanced method using .split() again:
user_and_message = parts[2].split()
username_advanced = user_and_message[1].strip("'") # Get the second word, remove quotes
message_advanced = ' '.join(user_and_message[2:])   # Join words from the 3rd onwards
print("\n(Advanced Method) Username:", username_advanced)
print("(Advanced Method) Message:", message_advanced)

"""### Exercise 4 (Challenge): Simple Vending Machine Logic
1.  Create a variable `balance = 2.00`.
2.  Create a variable `item_price = 1.50`.
3.  Ask the user if they are a student ("yes" or "no").
4.  Apply a 10% discount if the user is a student.
5.  Determine if their balance is sufficient.
6.  Print `True` or `False` for the variable `can_purchase`.
"""

# Exercise 4 (Challenge): Simple Vending Machine Logic
balance = 2.00
item_price = 1.50

is_student_str = input("Are you a student? (yes/no): ").lower().strip() # Make input lowercase and remove spaces

# Check if the answer is "yes" - this is a case-insensitive check
if is_student_str == 'yes':
    discount = 0.10
    item_price = item_price * (1 - discount) # Apply 10% discount
    print(f"Student discount applied! New price: ${item_price:.2f}")

# Check if they can afford the (potentially discounted) item
can_purchase = balance >= item_price

print("Can make purchase?", can_purchase)