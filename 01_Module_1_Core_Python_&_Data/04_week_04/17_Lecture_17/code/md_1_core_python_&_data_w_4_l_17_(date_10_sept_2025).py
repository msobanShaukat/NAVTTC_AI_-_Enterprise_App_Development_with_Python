# -*- coding: utf-8 -*-
"""MD_1: Core_python_&_data_W#4_L#17_(Date:10-Sept-2025)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f6KExR1qwTxMQBXbX_c5vLcBoXtsH7IX

# 🗄️ Module 1: Core Python & Data - Week 4 Lecture 16
**Date:** 10/09/2025  
**Documented By:** Muhammad Soban Shaukat

## 📝 Data Manipulation Language (DML): Working with Database Content

Welcome to Lecture 16! In our previous session, we learned how to build database structures using DDL commands. Today, we'll learn how to populate and manipulate data within those structures using Data Manipulation Language (DML).

```python
# Setup: Import necessary libraries
import sqlite3
import pandas as pd

print("✅ Libraries imported successfully!")
```

## 📋 Today's Agenda

1.  **📊 The "What" - What is DML?**
    *   Understanding Data Manipulation Language
    *   The Digital Filing Clerk analogy

2.  **🔧 Core DML Commands**
    *   INSERT: Adding new records
    *   UPDATE: Modifying existing records  
    *   DELETE: Removing records

3.  **🏪 Real-World Scenarios & Best Practices**
    *   Managing an online store's inventory
    *   The concept of "Soft Deletion"

4.  **🧪 Hands-On Lab: Managing a Sample Database**
    *   Practical Python scripts for database operations
    *   Bonus challenges for advanced practice

---

## 1. 📊 The "What" - What is DML?

### 🏗️ Beyond Structure: Populating Our Database

In our last lecture, we learned how to build the skeleton of our database with DDL commands. We designed the blueprints and constructed the empty containers for our data.

But an empty database isn't useful. We've built the filing cabinets, but now we need to actually put files in them!

```python
print("📊 DATA MANIPULATION LANGUAGE (DML)")
print("=" * 40)

print("🔑 DML vs DDL:")
print("   - DDL (Data Definition Language): Builds database STRUCTURE")
print("   - DML (Data Manipulation Language): Manages database CONTENT")

print("\n🏢 Analogy:")
print("   - DDL: Architects who design and build empty filing cabinets")
print("   - DML: Filing clerks who manage the actual files inside")
```

### 👨‍💼 DML as the Digital Filing Clerk

With DML, we become the Digital Filing Clerk. Our job is to manage the actual records that go into our database "filing cabinets."

```python
print("👨‍💼 THE DIGITAL FILING CLERK")
print("=" * 30)

print("📥 INSERT: 'Here is a new form. Please file it in the Customers cabinet.'")
print("📝 UPDATE: 'Please find Alice Smith's file and change her address.'")  
print("🗑️ DELETE: 'Please remove Order #102 from the Orders cabinet.'")

print("\n💡 These three commands handle day-to-day database operations!")
```

---

## 2. 🔧 Core DML Commands

### 📥 Command 1: INSERT INTO

The `INSERT INTO` statement adds new rows of data to a table.

```python
# Create a database for DML examples
dml_conn = sqlite3.connect("dml_examples.db")
dml_cur = dml_conn.cursor()

# Create a Customers table first
dml_cur.execute('''
CREATE TABLE IF NOT EXISTS Customers (
    CustomerID INTEGER PRIMARY KEY,
    CustomerName TEXT NOT NULL,
    City TEXT,
    Country TEXT
)
''')
dml_conn.commit()
print("✅ Created Customers table for DML examples")
```

```python
# INSERT INTO example
print("\n📥 DML COMMAND 1: INSERT INTO")
print("=" * 35)

# Scenario: A new customer 'John Doe' creates an account
insert_query = '''
INSERT INTO Customers (CustomerName, City, Country)
VALUES ('John Doe', 'New York', 'USA')
'''

dml_cur.execute(insert_query)
dml_conn.commit()
print("✅ Added new customer: John Doe from New York, USA")

# Verify the insertion
dml_cur.execute("SELECT * FROM Customers")
result = dml_cur.fetchall()
print("📋 Current customers:")
for row in result:
    print(f"   ID: {row[0]}, Name: {row[1]}, City: {row[2]}, Country: {row[3]}")
```

### 📝 Command 2: UPDATE

The `UPDATE` statement modifies existing records in a table.

```python
# UPDATE example
print("\n📝 DML COMMAND 2: UPDATE")
print("=" * 35)

# Add more customers for demonstration
customers_to_add = [
    ('Ana Trujillo', 'México D.F.', 'Mexico'),
    ('Thomas Hardy', 'London', 'UK'),
    ('Maria Anders', 'Berlin', 'Germany')
]

dml_cur.executemany('''
INSERT INTO Customers (CustomerName, City, Country)
VALUES (?, ?, ?)
''', customers_to_add)
dml_conn.commit()
print("✅ Added demonstration customers")

# Show all customers before update
dml_cur.execute("SELECT * FROM Customers")
print("📋 Customers BEFORE update:")
for row in dml_cur.fetchall():
    print(f"   ID: {row[0]}, Name: {row[1]}, City: {row[2]}")

# Scenario: Ana Trujillo moves to Monterrey
update_query = '''
UPDATE Customers
SET City = 'Monterrey'
WHERE CustomerName = 'Ana Trujillo'
'''

dml_cur.execute(update_query)
dml_conn.commit()
print("\n✅ Updated Ana Trujillo's city to Monterrey")

# Show all customers after update
dml_cur.execute("SELECT * FROM Customers")
print("📋 Customers AFTER update:")
for row in dml_cur.fetchall():
    print(f"   ID: {row[0]}, Name: {row[1]}, City: {row[2]}")

print("\n⚠️  CRITICAL: Always use WHERE clause with UPDATE!")
print("   Without WHERE, you'd update ALL rows in the table!")
```

### 🗑️ Command 3: DELETE

The `DELETE` statement removes existing records from a table.

```python
# DELETE example
print("\n🗑️ DML COMMAND 3: DELETE")
print("=" * 35)

# Create a Products table for DELETE example
dml_cur.execute('''
CREATE TABLE IF NOT EXISTS Products (
    ProductID INTEGER PRIMARY KEY,
    ProductName TEXT NOT NULL,
    Price REAL
)
''')

# Add some products
products_to_add = [
    ('Chai', 18.00),
    ('Chang', 19.00),
    ('Aniseed Syrup', 10.00)
]

dml_cur.executemany('''
INSERT INTO Products (ProductName, Price)
VALUES (?, ?)
''', products_to_add)
dml_conn.commit()
print("✅ Added demonstration products")

# Show products before deletion
dml_cur.execute("SELECT * FROM Products")
print("📋 Products BEFORE deletion:")
for row in dml_cur.fetchall():
    print(f"   ID: {row[0]}, Name: {row[1]}, Price: ${row[2]}")

# Scenario: Discontinue 'Chai' product
delete_query = '''
DELETE FROM Products
WHERE ProductName = 'Chai'
'''

dml_cur.execute(delete_query)
dml_conn.commit()
print("\n✅ Deleted product: Chai")

# Show products after deletion
dml_cur.execute("SELECT * FROM Products")
print("📋 Products AFTER deletion:")
for row in dml_cur.fetchall():
    print(f"   ID: {row[0]}, Name: {row[1]}, Price: ${row[2]}")

print("\n⚠️  CRITICAL: Always use WHERE clause with DELETE!")
print("   Without WHERE, you'd delete ALL rows in the table!")
```

---

## 3. 🏪 Real-World Scenarios & Best Practices

### ⚠️ The Problem with DELETE

Permanent deletion is often a bad idea in business applications. Let's explore why:

```python
print("⚠️ THE PROBLEM WITH PERMANENT DELETION")
print("=" * 40)

# Create an Orders table to demonstrate the issue
dml_cur.execute('''
CREATE TABLE IF NOT EXISTS Orders (
    OrderID INTEGER PRIMARY KEY,
    CustomerID INTEGER,
    OrderDate TEXT,
    Status TEXT DEFAULT 'Active',
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
)
''')

# Add some orders
orders_to_add = [
    (1, '2025-09-01'),
    (2, '2025-09-02'),
    (3, '2025-09-03')
]

dml_cur.executemany('''
INSERT INTO Orders (CustomerID, OrderDate)
VALUES (?, ?)
''', orders_to_add)
dml_conn.commit()
print("✅ Created demonstration orders")

# Show orders
dml_cur.execute("SELECT * FROM Orders")
print("📋 Current orders:")
for row in dml_cur.fetchall():
    print(f"   OrderID: {row[0]}, CustomerID: {row[1]}, Date: {row[2]}, Status: {row[3]}")

print("\n❌ PROBLEMS WITH PERMANENT DELETE:")
print("   - Lost historical data for analytics")
print("   - Can't track cancellation patterns")  
print("   - Breaks relationships with other tables")
print("   - No audit trail of business activities")
```

### 💡 The Solution: Soft Deletion

Instead of permanent deletion, we use "soft deletion" by adding a status column.

```python
# Soft deletion example
print("\n💡 THE SOLUTION: SOFT DELETION")
print("=" * 35)

# Scenario: Cancel order #2
soft_delete_query = '''
UPDATE Orders
SET Status = 'Cancelled'
WHERE OrderID = 2
'''

dml_cur.execute(soft_delete_query)
dml_conn.commit()
print("✅ Soft-deleted order #2 (marked as Cancelled)")

# Show orders after soft deletion
dml_cur.execute("SELECT * FROM Orders")
print("📋 Orders after soft deletion:")
for row in dml_cur.fetchall():
    print(f"   OrderID: {row[0]}, CustomerID: {row[1]}, Date: {row[2]}, Status: {row[3]}")

print("\n✅ BENEFITS OF SOFT DELETION:")
print("   - Preserves historical data")
print("   - Allows cancellation tracking")
print("   - Maintains referential integrity")
print("   - Enables business analytics")

# Close DML examples connection
dml_conn.close()
print("\n✅ Closed DML examples database connection")
```

---

## 4. 🧪 Hands-On Lab: Managing a Sample Database

Now let's apply what we've learned with a comprehensive hands-on lab!

### 🎯 Goal: Create and Manage a Store Database

We'll create a complete store database with products, customers, and orders, then practice all DML operations.

```python
print("🧪 HANDS-ON LAB: STORE DATABASE MANAGEMENT")
print("=" * 50)

# Create a new database for our store
store_conn = sqlite3.connect("store.db")
store_cur = store_conn.cursor()
print("✅ Connected to store.db database")
```

### 📋 Step 1: Create Database Schema

```python
# Create store database schema
print("\n📋 STEP 1: CREATE DATABASE SCHEMA")
print("=" * 35)

# Create Products table
store_cur.execute('''
CREATE TABLE IF NOT EXISTS Products (
    ProductID INTEGER PRIMARY KEY,
    ProductName TEXT NOT NULL,
    Price REAL,
    Discontinued INTEGER DEFAULT 0
)
''')

# Create Customers table  
store_cur.execute('''
CREATE TABLE IF NOT EXISTS Customers (
    CustomerID INTEGER PRIMARY KEY,
    CustomerName TEXT NOT NULL,
    City TEXT,
    Country TEXT
)
''')

# Create Orders table with soft delete capability
store_cur.execute('''
CREATE TABLE IF NOT EXISTS Orders (
    OrderID INTEGER PRIMARY KEY,
    CustomerID INTEGER,
    OrderDate TEXT,
    Status TEXT DEFAULT 'Active',
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
)
''')

store_conn.commit()
print("✅ Created store database schema:")
print("   - Products table")
print("   - Customers table")
print("   - Orders table with Status column for soft deletion")
```

### 📋 Step 2: Insert Initial Data

```python
# Insert initial data
print("\n📋 STEP 2: INSERT INITIAL DATA")
print("=" * 35)

# Insert products
products = [
    ('Chais', 18.00, 0),
    ('Chang', 19.00, 0),
    ('Aniseed Syrup', 9.00, 0),  # Incorrect price for later demonstration
    ('Chef Anton Cajun Seasoning', 22.00, 0),
    ('Gumbo Mix', 21.35, 0)
]

store_cur.executemany('''
INSERT INTO Products (ProductName, Price, Discontinued)
VALUES (?, ?, ?)
''', products)

# Insert customers
customers = [
    ('Alfreds Futterkiste', 'Berlin', 'Germany'),
    ('Ana Trujillo', 'México D.F.', 'Mexico'),
    ('Antonio Moreno', 'México D.F.', 'Mexico'),
    ('Around the Horn', 'London', 'UK')
]

store_cur.executemany('''
INSERT INTO Customers (CustomerName, City, Country)
VALUES (?, ?, ?)
''', customers)

# Insert orders
orders = [
    (1, '2025-09-01', 'Active'),
    (2, '2025-09-02', 'Active'),
    (3, '2025-09-03', 'Active')
]

store_cur.executemany('''
INSERT INTO Orders (CustomerID, OrderDate, Status)
VALUES (?, ?, ?)
''', orders)

store_conn.commit()
print("✅ Inserted initial data:")
print(f"   - {len(products)} products")
print(f"   - {len(customers)} customers")
print(f"   - {len(orders)} orders")
```

### 📋 Step 3: Display Initial Data

```python
# Display initial data
print("\n📋 STEP 3: DISPLAY INITIAL DATA")
print("=" * 35)

print("📦 PRODUCTS:")
store_cur.execute("SELECT * FROM Products")
for row in store_cur.fetchall():
    status = "Discontinued" if row[3] else "Active"
    print(f"   {row[0]}: {row[1]} - ${row[2]} ({status})")

print("\n👥 CUSTOMERS:")
store_cur.execute("SELECT * FROM Customers")
for row in store_cur.fetchall():
    print(f"   {row[0]}: {row[1]} - {row[2]}, {row[3]}")

print("\n📋 ORDERS:")
store_cur.execute("SELECT * FROM Orders")
for row in store_cur.fetchall():
    print(f"   {row[0]}: Customer #{row[1]} - {row[2]} ({row[3]})")
```

### 📋 Step 4: Practice DML Operations

```python
# Practice DML operations
print("\n📋 STEP 4: PRACTICE DML OPERATIONS")
print("=" * 45)

# 1. INSERT: Add a new product
print("1. 📥 INSERT: Add a new product 'Northwoods Cranberry Sauce'")
new_product = ('Northwoods Cranberry Sauce', 40.00, 0)
store_cur.execute("INSERT INTO Products (ProductName, Price, Discontinued) VALUES (?, ?, ?)", new_product)
store_conn.commit()
print("   ✅ Added new product")

# 2. UPDATE: Correct Aniseed Syrup price
print("\n2. 📝 UPDATE: Correct Aniseed Syrup price to $10.00")
store_cur.execute("UPDATE Products SET Price = 10.00 WHERE ProductName = 'Aniseed Syrup'")
store_conn.commit()
print("   ✅ Updated product price")

# 3. Soft DELETE: Discontinue a product
print("\n3. 🗑️ SOFT DELETE: Discontinue 'Gumbo Mix'")
store_cur.execute("UPDATE Products SET Discontinued = 1 WHERE ProductName = 'Gumbo Mix'")
store_conn.commit()
print("   ✅ Marked product as discontinued")

# 4. Soft DELETE: Cancel an order
print("\n4. 🗑️ SOFT DELETE: Cancel order #2")
store_cur.execute("UPDATE Orders SET Status = 'Cancelled' WHERE OrderID = 2")
store_conn.commit()
print("   ✅ Marked order as cancelled")

# Show updated data
print("\n🔄 UPDATED DATA:")
print("📦 PRODUCTS:")
store_cur.execute("SELECT * FROM Products")
for row in store_cur.fetchall():
    status = "Discontinued" if row[3] else "Active"
    print(f"   {row[0]}: {row[1]} - ${row[2]} ({status})")

print("\n📋 ORDERS:")
store_cur.execute("SELECT * FROM Orders")
for row in store_cur.fetchall():
    print(f"   {row[0]}: Customer #{row[1]} - {row[2]} ({row[3]})")
```

---

## 5. 🚀 Bonus Challenges

### 🎯 Advanced Practice Exercises

Test your skills with these bonus challenges!

```python
print("🚀 BONUS CHALLENGES")
print("=" * 20)
```

**Challenge 1: The Big Sale**

```python
print("1. 🏷️ THE BIG SALE: 20% discount on products over $15")
print("=" * 55)

# Apply 20% discount to products over $15
sale_query = '''
UPDATE Products
SET Price = Price * 0.80
WHERE Price > 15 AND Discontinued = 0
'''

store_cur.execute(sale_query)
store_conn.commit()
print("   ✅ Applied 20% discount to products over $15")

# Show products after sale
store_cur.execute("SELECT * FROM Products WHERE Discontinued = 0")
print("📦 PRODUCTS AFTER SALE:")
for row in store_cur.fetchall():
    print(f"   {row[0]}: {row[1]} - ${row[2]:.2f}")
```

**Challenge 2: Inventory Management**

```python
print("\n2. 📊 INVENTORY MANAGEMENT: Add stock quantity tracking")
print("=" * 60)

# Add StockQuantity column
alter_query = '''
ALTER TABLE Products ADD COLUMN StockQuantity INTEGER DEFAULT 0
'''

store_cur.execute(alter_query)
store_conn.commit()
print("   ✅ Added StockQuantity column to Products table")

# Update stock for all products
update_stock_query = '''
UPDATE Products SET StockQuantity = 50
'''

store_cur.execute(update_stock_query)
store_conn.commit()
print("   ✅ Set stock quantity to 50 for all products")

# Show final products with stock
store_cur.execute("SELECT * FROM Products")
print("📦 FINAL PRODUCTS WITH STOCK:")
for row in store_cur.fetchall():
    status = "Discontinued" if row[3] else "Active"
    print(f"   {row[0]}: {row[1]} - ${row[2]:.2f} (Stock: {row[4]}, {status})")

# Close store database connection
store_conn.close()
print("\n✅ Closed store database connection")
```

---

## 6. 📚 Comprehensive Summary

### 🎯 What We Learned Today:

1.  **Data Manipulation Language (DML):**
    - INSERT: Adding new records to tables
    - UPDATE: Modifying existing records
    - DELETE: Removing records from tables

2.  **Best Practices:**
    - Always use WHERE clause with UPDATE and DELETE
    - Implement soft deletion instead of permanent deletion
    - Use transactions for multiple related operations

3.  **Real-World Applications:**
    - Managing e-commerce inventory
    - Handling customer data updates
    - Tracking order status changes

### 🔑 Key DML Commands:

| Command | Purpose | Example |
|:--------|:--------|:--------|
| **INSERT** | Add new records | `INSERT INTO table (col1, col2) VALUES (val1, val2)` |
| **UPDATE** | Modify existing records | `UPDATE table SET col1 = val1 WHERE condition` |
| **DELETE** | Remove records | `DELETE FROM table WHERE condition` |

### 💡 Pro Tips:

1.  **Use parameterized queries** to prevent SQL injection attacks
2.  **Always backup your database** before major DML operations
3.  **Test your queries** on a small dataset first
4.  **Use transactions** for multiple related operations
5.  **Implement soft deletion** for business-critical data

### ✅ Completion Checklist:

- [x] Understand the purpose of DML commands
- [x] Practice INSERT, UPDATE, and DELETE operations
- [x] Learn about the dangers of permanent deletion
- [x] Implement soft deletion patterns
- [x] Complete hands-on lab with a store database
- [x] Solve bonus challenges

### 🔮 Next Steps:

1.  **Learn about transactions**: BEGIN, COMMIT, ROLLBACK
2.  **Study advanced DML**: Bulk operations, conditional updates
3.  **Explore database security**: User permissions, injection prevention
4.  **Practice with real datasets**: Import and manipulate real-world data
5.  **Learn about ORMs**: SQLAlchemy, Django ORM for abstracted database access

```python
print("\n🎉 Congratulations! You've mastered Data Manipulation Language!")
print("   You can now confidently insert, update, and delete data in SQL databases!")
```
"""

