# -*- coding: utf-8 -*-
"""MD_1: Core_python_&_data_W#3_L#11_(Date:01-Sept-2025)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tz_mRBo1GqjBPhp-mIc4icojPkH39SQf

# üß∞ Module 1: Core Python & Data - Week 3 Lecture 11
**Date:** 01/09/2025  
**Documented By:** Muhammad Soban Shaukat

## üèóÔ∏è A New Way of Building: Introduction to Modules

Welcome back! You've learned to write your own functions. But what if the function you need already exists? And how do you organize your own code as it gets bigger? Python's power comes from its **modules**. Today, we'll learn how to use pre-built modules from the Standard Library and how to turn your own code into reusable modules.

## üìã Today's Agenda

1.  **ü§î The "Why" - What is a Module?**
    *   Analogy: The Toolbox

2.  **üõ†Ô∏è Creating Your Own Modules**
    *   From Python File to Reusable Tool
    *   Example: Making a `greeter` module

3.  **üìö Exploring the Standard Library**
    *   The `math` Module: For advanced calculations
    *   The `random` Module: For generating random numbers and choices

4.  **üß™ Putting It All Together & The Hands-On Lab**
    *   Hands-On Lab: The Password Generator
    *   Q&A and Wrap-up

## 1. ü§î The "Why" - What is a Module?

### üß∞ Analogy: The Toolbox

Imagine you're building a chair. You could create your own screws and your own screwdriver from scratch, but that's a lot of work. It's much easier to get a **toolbox** that already has all the tools and parts you need.

A **module** in Python is like a toolbox. It's a file containing Python code‚Äîfunctions, variables, and classes. You can **import** this toolbox into your program to use its tools without having to build them yourself.
"""

# Simple analogy in code
# Without modules (making your own tools)
def my_sqrt(number):
    # You'd have to write complex math yourself!
    return number ** 0.5

print("Square root without module:", my_sqrt(25))

# With modules (using existing tools)
import math
print("Square root with math module:", math.sqrt(25))

"""## 2. üõ†Ô∏è Creating Your Own Modules

The best part? **Any Python file can be a module**. If you write useful functions in a file, you can import that file into another script to reuse those functions. This is the key to organizing large projects and avoiding copy-pasting code.

### üìÅ The Concept:
1. You write functions or classes in a Python file (e.g., `my_tools.py`)
2. In another file (e.g., `main_project.py`), you write `import my_tools`
3. Now you can use any function from the first file by calling `my_tools.function_name()`

### üîß Example: Making a Greeter Module
Let's create our own custom toolbox for greeting people.
"""

# Commented out IPython magic to ensure Python compatibility.
# # In Colab, we'll simulate creating separate files using %%writefile magic command
# 
# # Step 1: Create the module file (greeter.py)
# %%writefile greeter.py
# """
# greeter.py - A simple module for greeting people
# """
# 
# def say_hello(name):
#     """A simple function to say hello."""
#     return f"Hello, {name}!"
# 
# def say_goodbye(name):
#     """A simple function to say goodbye."""
#     return f"Goodbye, {name}!"
# 
# def formal_greeting(name, title):
#     """A more formal greeting."""
#     return f"Good day, {title} {name}!"
# 
# # Module-level variable
# company = "Python Innovations Inc."

# Commented out IPython magic to ensure Python compatibility.
# # Step 2: Create the main script to use the module (app.py)
# %%writefile app.py
# """
# app.py - Main script that uses our greeter module
# """
# 
# # We import our own module just like a built-in one!
# import greeter
# 
# # Now we can use the functions from greeter.py
# print(greeter.say_hello("Alice"))
# print(greeter.say_goodbye("Bob"))
# print(greeter.formal_greeting("Smith", "Dr."))
# 
# # We can also access module variables
# print(f"Welcome to {greeter.company}")
# 
# # We can see all available functions/attributes
# print("\nAvailable in greeter module:")
# for item in dir(greeter):
#     if not item.startswith('_'):  # Skip private attributes
#         print(f"  - {item}")

# Step 3: Run the main script (simulating command line execution)
!python app.py

"""### üìù Importing Specific Items
You can also import specific functions instead of the whole module:
"""

# Alternative import methods
from greeter import say_hello, company

# Now we can use them directly without the module prefix
print(say_hello("Eve"))
print(company)

# Import with alias for shorter names
import greeter as gr
print(gr.say_goodbye("Charlie"))

"""## 3. üìö Exploring the Standard Library

Python comes with a rich collection of built-in modules called the **Standard Library**. These are like professional toolboxes that come with Python - no installation needed!

### üßÆ The Math Module: Your Pocket Calculator
The `math` module gives you access to advanced mathematical functions.

**How to use it:** `import math`

**Key Functions:**
- `math.sqrt(x)`: Returns the square root of x
- `math.ceil(x)`: Rounds x up to the nearest whole number
- `math.floor(x)`: Rounds x down to the nearest whole number
- `math.pi`: A variable that holds the value of Pi (3.14159...)
- `math.e`: The base of natural logarithms (2.71828...)
"""

# Example: Using the math module
import math

# Calculate square root
result = math.sqrt(81)
print(f"The square root of 81 is {result}")

# Use the value of Pi for circle calculations
radius = 5
circumference = 2 * math.pi * radius
area = math.pi * radius ** 2

print(f"Circle with radius {radius}:")
print(f"  Circumference: {circumference:.2f}")
print(f"  Area: {area:.2f}")

# Rounding functions
number = 3.7
print(f"ceil({number}) = {math.ceil(number)}")
print(f"floor({number}) = {math.floor(number)}")

# Constants
print(f"Pi: {math.pi}")
print(f"Euler's number: {math.e}")

"""### üß† In-Class Exercise: Area of a Circle

**Instructions:**
1. Import the `math` module
2. Create a variable `radius` and set it to 10
3. Calculate the area of the circle using the formula: `Area = œÄ * r¬≤`
4. Print the result in a user-friendly sentence
"""

# Exercise Solution: Area of a Circle
import math

radius = 10
area = math.pi * (radius ** 2)

print(f"The area of a circle with radius {radius} is {area:.2f}")

"""### üé≤ The Random Module: Embracing Unpredictability
The `random` module allows you to generate random numbers, pick random items, and shuffle lists.

**What it's for:** Games, simulations, and creating unpredictable data like secure passwords.

**How to use it:** `import random`

**Key Functions:**
- `random.randint(a, b)`: Returns a random integer between a and b (inclusive)
- `random.choice(sequence)`: Returns a single random element from a sequence
- `random.shuffle(x)`: Shuffles the items in a list x in place
- `random.random()`: Returns a random float between 0.0 and 1.0
- `random.uniform(a, b)`: Returns a random float between a and b
"""

# Example: Using the random module
import random

# Simulate a six-sided dice roll
dice_roll = random.randint(1, 6)
print(f"You rolled a {dice_roll}")

# Pick a random winner from a list
participants = ["Alice", "Bob", "Charlie", "Dana"]
winner = random.choice(participants)
print(f"The winner is {winner}!")

# Shuffle a list (modifies the original list)
cards = ["Ace", "King", "Queen", "Jack", "10"]
print("Original cards:", cards)
random.shuffle(cards)
print("Shuffled cards:", cards)

# Generate random floats
print("Random float between 0-1:", random.random())
print("Random float between 5-10:", random.uniform(5, 10))

"""### üß† In-Class Exercise: Coin Flip

**Instructions:**
1. Import the `random` module
2. Create a list called `outcomes` that contains two strings: "Heads" and "Tails"
3. Use `random.choice()` to select one of the outcomes from your list
4. Print the result
"""

# Exercise Solution: Coin Flip
import random

outcomes = ["Heads", "Tails"]
result = random.choice(outcomes)

print(f"The coin flip result is: {result}")

"""## 4. üìö Python Standard Library ‚Äì Must-Know Modules

Python's Standard Library is massive! Here are some essential modules you should know:

| Module | Purpose | Key Features |
| :--- | :--- | :--- |
| **`os`** | Interact with operating system | File/folder operations, environment variables |
| **`pathlib`** | Modern file path handling | Object-oriented path manipulation |
| **`datetime`** | Work with dates and times | Date arithmetic, formatting, timezones |
| **`sys`** | Access Python runtime | Command-line arguments, system info |
| **`json`** | JSON data handling | Convert between JSON and Python objects |
| **`collections`** | Advanced data types | `Counter`, `deque`, `namedtuple`, etc. |
| **`unittest`** | Automated testing | Write and run test cases |
| **`hashlib`** | Secure hashing | Password hashing, data integrity |

**These are built-in ‚Äî no installation needed! Just import and go.**
"""

# Quick examples of other useful modules
import os
import datetime
import json

# OS module example
print("Current working directory:", os.getcwd())
print("Files in current directory:", os.listdir('.'))

# Datetime module example
now = datetime.datetime.now()
print("Current date/time:", now)
print("Formatted date:", now.strftime("%Y-%m-%d %H:%M:%S"))

# JSON module example
data = {
    "name": "Alice",
    "age": 30,
    "is_student": False,
    "courses": ["Math", "Science"]
}

json_string = json.dumps(data, indent=2)
print("JSON representation:")
print(json_string)

# Convert back to Python
python_data = json.loads(json_string)
print("Python data:", python_data)

"""## 5. üß™ Hands-On Lab: Secure Password Generator

**Goal:** Build a password generator using OOP that:
- Generates 8-character secure passwords
- Must include:
  - 1 uppercase letter
  - 1 lowercase letter
  - 1 digit
  - 1 special character
- Uses a class structure placed in a separate module and imported in main script

### üîß Step 1: Create the Module File ‚Üí `password_generator.py`
"""

# Commented out IPython magic to ensure Python compatibility.
# # Step 1: Create the password_generator module
# %%writefile password_generator.py
# """
# password_generator.py - A secure password generator module
# """
# 
# import random
# import string
# 
# class PasswordGenerator:
#     def __init__(self, length=8):
#         self.length = length
#         # Define character sets
#         self.uppercase_letters = string.ascii_uppercase  # A-Z
#         self.lowercase_letters = string.ascii_lowercase  # a-z
#         self.digits = string.digits                      # 0-9
#         self.special_chars = "!@#$%^&*"                 # Special characters
# 
#         # Combine all characters for the remaining spots
#         self.all_chars = (self.uppercase_letters +
#                          self.lowercase_letters +
#                          self.digits +
#                          self.special_chars)
# 
#     def generate_password(self):
#         """Generate a secure password meeting complexity requirements."""
#         # Start with empty password list
#         password_chars = []
# 
#         # Ensure at least one of each required type
#         password_chars.append(random.choice(self.uppercase_letters))
#         password_chars.append(random.choice(self.lowercase_letters))
#         password_chars.append(random.choice(self.digits))
#         password_chars.append(random.choice(self.special_chars))
# 
#         # Fill the rest with random characters from all groups
#         remaining_length = self.length - len(password_chars)
#         for _ in range(remaining_length):
#             password_chars.append(random.choice(self.all_chars))
# 
#         # Shuffle to avoid predictable patterns
#         random.shuffle(password_chars)
# 
#         # Convert list to string
#         return ''.join(password_chars)
# 
#     def generate_multiple_passwords(self, count=5):
#         """Generate multiple passwords."""
#         return [self.generate_password() for _ in range(count)]
# 
#     def is_secure(self, password):
#         """Check if a password meets security requirements."""
#         has_upper = any(char in self.uppercase_letters for char in password)
#         has_lower = any(char in self.lowercase_letters for char in password)
#         has_digit = any(char in self.digits for char in password)
#         has_special = any(char in self.special_chars for char in password)
# 
#         return has_upper and has_lower and has_digit and has_special
# 
# # Example usage if run directly
# if __name__ == "__main__":
#     generator = PasswordGenerator()
#     print("Sample password:", generator.generate_password())

"""### üîß Step 2: Create Main File ‚Üí `app.py`"""

# Commented out IPython magic to ensure Python compatibility.
# # Step 2: Create the main application file
# %%writefile app.py
# """
# app.py - Main application that uses our password generator
# """
# 
# from password_generator import PasswordGenerator
# 
# def main():
#     # Create password generator instance
#     generator = PasswordGenerator(length=12)  # You can change the length
# 
#     # Generate a single password
#     print("üîí Secure Password Generator")
#     print("=" * 30)
# 
#     password = generator.generate_password()
#     print(f"Your new password: {password}")
#     print(f"Length: {len(password)} characters")
#     print(f"Meets security requirements: {generator.is_secure(password)}")
# 
#     # Generate multiple passwords
#     print("\n" + "=" * 30)
#     print("Multiple password options:")
#     print("=" * 30)
# 
#     passwords = generator.generate_multiple_passwords(3)
#     for i, pwd in enumerate(passwords, 1):
#         print(f"{i}. {pwd} (Secure: {generator.is_secure(pwd)})")
# 
#     # Test with different lengths
#     print("\n" + "=" * 30)
#     print("Testing different password lengths:")
#     print("=" * 30)
# 
#     for length in [8, 12, 16]:
#         test_generator = PasswordGenerator(length)
#         test_password = test_generator.generate_password()
#         print(f"Length {length}: {test_password}")
# 
# if __name__ == "__main__":
#     main()

"""### üîß Step 3: Run and Test the Application"""

# Step 3: Run the main application
!python app.py

"""### üß™ Testing
Let's test our password generator thoroughly:
"""

# Comprehensive testing
from password_generator import PasswordGenerator

def test_password_generator():
    """Test the password generator thoroughly."""
    print("üß™ Comprehensive Password Generator Test")
    print("=" * 50)

    # Test different lengths
    for length in [8, 10, 12, 16]:
        print(f"\nTesting with length {length}:")
        generator = PasswordGenerator(length)

        # Generate multiple passwords
        passwords = generator.generate_multiple_passwords(3)

        for i, password in enumerate(passwords, 1):
            is_secure = generator.is_secure(password)
            has_correct_length = len(password) == length

            print(f"  Password {i}: {password}")
            print(f"    Length: {len(password)} (Expected: {length}) - {'‚úÖ' if has_correct_length else '‚ùå'}")
            print(f"    Secure: {'‚úÖ' if is_secure else '‚ùå'}")

            if not has_correct_length or not is_secure:
                print(f"    ‚ùå FAILED: Password doesn't meet requirements!")

    # Test edge cases
    print("\n" + "=" * 50)
    print("Testing edge cases:")
    print("=" * 50)

    # Test very short password (should still work if >= 4)
    try:
        short_generator = PasswordGenerator(6)
        short_pwd = short_generator.generate_password()
        print(f"Short password (6 chars): {short_pwd}")
        print(f"  Secure: {short_generator.is_secure(short_pwd)}")
    except Exception as e:
        print(f"Error with short password: {e}")

# Run the tests
test_password_generator()

"""### üöÄ Bonus Challenge (Page 21)
Let's implement the bonus features:
"""

# Commented out IPython magic to ensure Python compatibility.
# # Bonus Challenge Implementation
# %%writefile enhanced_password_generator.py
# """
# enhanced_password_generator.py - Enhanced password generator with bonus features
# """
# 
# import random
# import string
# 
# class EnhancedPasswordGenerator:
#     def __init__(self, length=8, include_special=True):
#         self.length = max(length, 4)  # Minimum 4 characters required
#         self.include_special = include_special
# 
#         # Define character sets
#         self.uppercase_letters = string.ascii_uppercase  # A-Z
#         self.lowercase_letters = string.ascii_lowercase  # a-z
#         self.digits = string.digits                      # 0-9
#         self.special_chars = "!@#$%^&*" if include_special else ""
# 
#         # Combine all characters for the remaining spots
#         self.all_chars = (self.uppercase_letters +
#                          self.lowercase_letters +
#                          self.digits +
#                          self.special_chars)
# 
#     def generate_password(self):
#         """Generate a secure password meeting complexity requirements."""
#         password_chars = []
# 
#         # Ensure at least one uppercase
#         password_chars.append(random.choice(self.uppercase_letters))
# 
#         # Ensure at least one lowercase
#         password_chars.append(random.choice(self.lowercase_letters))
# 
#         # Ensure at least one digit
#         password_chars.append(random.choice(self.digits))
# 
#         # Ensure at least one special character if enabled
#         if self.include_special and self.special_chars:
#             password_chars.append(random.choice(self.special_chars))
# 
#         # Fill the rest with random characters
#         remaining_length = self.length - len(password_chars)
#         for _ in range(remaining_length):
#             password_chars.append(random.choice(self.all_chars))
# 
#         # Shuffle to avoid predictable patterns
#         random.shuffle(password_chars)
# 
#         return ''.join(password_chars)
# 
#     def generate_multiple_passwords(self, count=5):
#         """Generate multiple passwords."""
#         return [self.generate_password() for _ in range(count)]
# 
#     def is_secure(self, password):
#         """Check if a password meets security requirements."""
#         has_upper = any(char in self.uppercase_letters for char in password)
#         has_lower = any(char in self.lowercase_letters for char in password)
#         has_digit = any(char in self.digits for char in password)
#         has_special = any(char in self.special_chars for char in password) if self.include_special else True
# 
#         return has_upper and has_lower and has_digit and has_special
# 
# # Test the enhanced generator
# if __name__ == "__main__":
#     print("Testing Enhanced Password Generator")
#     print("=" * 40)
# 
#     # Test with special characters
#     print("\nWith special characters:")
#     gen1 = EnhancedPasswordGenerator(length=10, include_special=True)
#     for pwd in gen1.generate_multiple_passwords(2):
#         print(f"  {pwd} (Secure: {gen1.is_secure(pwd)})")
# 
#     # Test without special characters
#     print("\nWithout special characters:")
#     gen2 = EnhancedPasswordGenerator(length=10, include_special=False)
#     for pwd in gen2.generate_multiple_passwords(2):
#         print(f"  {pwd} (Secure: {gen2.is_secure(pwd)})")

# Test the enhanced password generator
!python enhanced_password_generator.py

"""## 6. üìö Comprehensive Modules Summary

### üéØ What We Learned:

1.  **Module Basics:** Python files containing reusable code (functions, classes, variables)
2.  **Creating Modules:** Any `.py` file can be a module
3.  **Importing:** Use `import module_name` or `from module import function`
4.  **Standard Library:** Rich collection of built-in modules
5.  **Key Modules:** `math`, `random`, `os`, `datetime`, `json`, etc.

### üîë Key Concepts:

- **Modularity:** Breaking code into reusable components
- **Code Organization:** Keeping related functionality together
- **Code Reuse:** Avoiding duplication through imports
- **Namespaces:** Using module prefixes to avoid naming conflicts

### üí° Real-world Applications:

- **Code Organization:** Large projects with multiple files
- **Code Sharing:** Distributing reusable components
- **Third-party Libraries:** Using `pip` to install external modules
- **Framework Development:** Building extensible systems

### üöÄ Best Practices:

1.  **Use Descriptive Names:** `database_utils.py` instead of `utils.py`
2.  **Group Related functionality:** Keep related functions/classes together
3.  **Use `if __name__ == "__main__":`** for module testing
4.  **Document Your Modules:** Use docstrings at the top of files
5.  **Follow PEP 8:** Python style guide for consistent code

### üìä Module Import Methods:

| Method | Syntax | Usage |
| :--- | :--- | :--- |
| **Basic Import** | `import module` | `module.function()` |
| **Selective Import** | `from module import func` | `func()` |
| **Alias Import** | `import module as md` | `md.function()` |
| **Wildcard Import** | `from module import *` | `function()` (not recommended) |

### ‚úÖ Completion Checklist:

- [x] Created and used custom modules
- [x] Used `math` module for mathematical operations
- [x] Used `random` module for randomness
- [x] Built a complete password generator application
- [x] Implemented bonus features for enhanced functionality
- [x] Tested code thoroughly with various scenarios

### üîÆ Next Steps:

1.  **Explore more Standard Library modules**
2.  **Learn about virtual environments** for project isolation
3.  **Discover third-party packages** with `pip`
4.  **Learn about packaging** for distributing your own modules
5.  **Explore advanced topics** like relative imports and package structure

This foundation in modules will help you build organized, maintainable, and professional Python applications!
"""